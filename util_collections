#! /bin/bash

##
# Examples:
#   local arr=(1 2 3 4 5)
#   
#   map $arr echo                   # print each element
#   map $arr 'inc $e 10'            # increment each element by `10`
#   map $arr 'decorate $e "[" "]"'  # decorate each element by `[` and `]`
##
function map(){
  local args=("$@")
  local length=$((${#args[@]}-1))
  local iterable=(${args:0:$length})
  local funName=${args:$length}

  #log_info "iterable=$iterable"
  #log_info "function=$funName"

  for e in $iterable; do
    eval "$funName $e"
  done
}

function mkstring(){
  local arr=()
  local delim=""
  local left=""
  local right=""

  for i in "$@"; do
    case $i in
      -d=*|--delim=*)
        delim="${i#*=}"
        shift
        ;;
      -l=*|--left=*)
        left="${i#*=}"
        shift
        ;;
      -r=*|--right=*)
        right="${i#*=}"
        shift
        ;;
      *)
        arr+="${i}"
        shift
      ;;
    esac
  done

  # space delimiter workaround
  local TMP_DELIMITER='<TMP_DELIMITER>'
  if [ -z $delim ]; then
    if [[ ${#delim} > 0 ]]; then
      delim=$TMP_DELIMITER
    fi
  fi

  local str=""
  for e in $arr; do
    str="${str}${e}${delim}"
  done

  # cut last delimiter in the tail position
  local delim_length=${#delim}
  str=$(strdrop_right "$str" $delim_length)

  # remove temporary delimiter if it is presented
  if [ $delim = $TMP_DELIMITER ]; then
    str=$(echo $str | sed 's/'$TMP_DELIMITER'/ /g') 
  fi
  
  local decorated="$left${str}$right"
  echo $decorated
}


